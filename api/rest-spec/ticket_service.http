### Create ticket request. Creates a new ticket with provided values.
POST http://localhost:8080/v1/tickets
Content-Type: application/json; charset=utf-8

{
    "issuer": "Ticketing System",
    "owner": "user@example.com",
    "subject": "Technical Issue!",
    "content": "Hello, i have some technical issue with your API documentation. Please help!",
    "metadata": "{\"ip\": \"185.186.187.188\"}",
    "ticket_importance_level": "LOW"
}

# Notes
# issuer: The name of your company or name of microservice who is creating the ticket.
# owner: Who is this ticket for?
# ticket_importance_level: Can be LOW, MEDIUM, HIGH or CRITICAL.

# Response
# HTTP/1.1 200 OK
# {}

### Read ticket request. Returns back a ticket and all associated comments by using its id.
GET http://localhost:8080/v1/tickets/10

# Response
# HTTP/1.1 200 OK
# {
#   "id": "10",
#   "issuer": "Ticketing System",
#   "owner": "user@example.com",
#   "subject": "Technical Issue!",
#   "content": "Hello, i have some technical issue with your API documentation. Please help!",
#   "metadata": "{\"ip\": \"185.186.187.188\"}",
#   "ticket_importance_level": "HIGH",
#   "ticket_status": "NEW",
#   "comments": [
#     {
#       "id": "1",
#       "owner": "Customer Support",
#       "content": "Please explain more about your problem!",
#       "metadata": "",
#       "created_at": "2019-11-15T16:59:50.19681Z",
#       "updated_at": "2019-11-15T16:59:50.19681Z"
#     }
#   ],
#   "issued_at": "2019-11-15T13:20:05.409461Z",
#   "updated_at": "2019-11-15T13:20:05.409461Z"
# }

### Update ticket request. Updates an already exists ticket with provided values.
PUT http://localhost:8080/v1/tickets
Content-Type: application/json; charset=utf-8

{
    "id": "10",
    "ticket_status": "CLOSED"
}

# Notes
# ticket_status: Can be RESOLVED, CLOSED or BLOCKED.

# Response
# HTTP/1.1 200 OK
# {}

### Delete ticket request. Deletes ticket and all associated comments by using its id.
DELETE http://localhost:8080/v1/tickets/10

# Response
# HTTP/1.1 200 OK
# {}
